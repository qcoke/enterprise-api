// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FriendLinkDao is the data access object for table friend_link.
type FriendLinkDao struct {
	Table   string            // Table is the underlying table name of the DAO.
	Group   string            // Group is the database configuration group name of current DAO.
	Columns FriendLinkColumns // Columns contains all the column names of Table for convenient usage.
}

// FriendLinkColumns defines and stores column names for table friend_link.
type FriendLinkColumns struct {
	Id          string // Id
	Title       string // 标题
	Description string // 描述
	Url         string // 链接地址
	Type        string // 跳转类型
}

//  friendLinkColumns holds the columns for table friend_link.
var friendLinkColumns = FriendLinkColumns{
	Id:          "id",
	Title:       "title",
	Description: "description",
	Url:         "url",
	Type:        "type",
}

// NewFriendLinkDao creates and returns a new DAO object for table data access.
func NewFriendLinkDao() *FriendLinkDao {
	return &FriendLinkDao{
		Group:   "default",
		Table:   "friend_link",
		Columns: friendLinkColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FriendLinkDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FriendLinkDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FriendLinkDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
